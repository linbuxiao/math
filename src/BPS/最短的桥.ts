// 在给定的二维二进制数组 A 中，存在两座岛。（岛是由四面相连的 1 形成的一个最大组。）

// 现在，我们可以将 0 变为 1，以使两座岛连接起来，变成一座岛。

// 返回必须翻转的 0 的最小数目。（可以保证答案至少是 1 。）

// 输入：A = [
// [1,1,1,1,1],
// [1,0,0,0,1],
// [1,0,1,0,1],
// [1,0,0,0,1],
// [1,1,1,1,1]]
// 输出：1

// 输入：A = [
// [0,1,0],
// [0,0,0],
// [0,0,1]]
// 输出：2

// 输入：A = [
//   [0,1],
//   [1,0]]
// 输出：1

export function shortestBridge(grid: number[][]): number {
  const len = grid.length;
  const [direct_x, direct_y] = [
    [0, 0, 1, -1],
    [1, -1, 0, 0],
  ];
  const eachDirect = [0, 1, 2, 3];

  const matirx: number[][] = [];
  const XY = (() => {
    for (let row = 0; row < len; row++) {
      for (let col = 0; col < len; col++) {
        if (grid[row][col] === 1) return [row, col];
      }
    }
  })()!;

  const dfs = (row: number, col: number) => {
    if (
      row < 0 ||
      col < 0 ||
      row > len - 1 ||
      col > len - 1 ||
      grid[row][col] === 2
    )
      return;

    if (grid[row][col] === 0) {
      matirx.push([row, col]);
      return;
    }
    grid[row][col] = 2;
    if (grid[row][col] === 2) {
      for (let k of eachDirect) {
        dfs(row + direct_x[k], col + direct_y[k]);
      }
    }
  };

  const [x, y] = XY;

  dfs(x, y);

  let step = 1;
  let cur: number[][] = [];
  const update = () => {
    if (matirx.length === 0) {
      step++;
      matirx.push(...cur);
      cur = [];
    }
  };
  while (matirx.length) {
    const [i, j] = matirx.shift()!;
    if (i < 0 || j < 0 || i > len - 1 || j > len - 1 || grid[i][j] === 2) {
      update();
      continue;
    }
    if (grid[i][j] === 1) break;
    if (grid[i][j] === 0) {
      for (let k in eachDirect) {
        cur.push([i + direct_x[k], j + direct_y[k]]);
      }
    }
    grid[i][j] = 2;
    update();
  }

  return step;
}

// [[0,1],[1,0]]
// [[0,1,0],[0,0,0],[0,0,1]]
// [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
// [[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1],[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1],[0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]
